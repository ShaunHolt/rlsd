#!/bin/sh

# create_iso: builds a root file system and generates a bootable ISO9660 image

. ./config

VERSION="$(date +%d%m%Y)"

# include the configuration file
. ./config

# get the image name suffix
cd flavors
. "./$1"
cd ..

# build the root file system
root_fs="$(mktemp -d -u)"
./scripts/build_rootfs "$1" "$root_fs"
if [ ! -f "$root_fs/boot/bzImage" ] ||
   [ ! -f "$root_fs/boot/initrd.xz" ] ||
   [ ! -f "$root_fs/boot/isolinux.bin" ]
then
	echo "Error: the root file system must contain:
  1) A kernel (/boot/bzImage)
  2) An initramfs archive (/boot/initrd.xz)
  3) A boot loader (/boot/isolinux.bin)"
	rm -rf "$root_fs"
	exit 1
fi

# create a temporary directory for the extracted ISO image contents
iso_root="$(mktemp -d)"
mkdir "$iso_root/boot"

# create a 11 MB, FAT12 UEFI boot image, for UEFI boot
if [ -f "$root_fs/boot/elilo.efi" ]
then
	dd if=/dev/zero of="$iso_root/boot/efiboot.img" bs=1024K count=11
	/sbin/mkfs.vfat -F 12 -n "RLSD" "$iso_root/boot/efiboot.img"
	mmd -i "$iso_root/boot/efiboot.img" "EFI"
	mmd -i "$iso_root/boot/efiboot.img" "EFI/BOOT"
	mcopy -i "$iso_root/boot/efiboot.img" \
	         "$root_fs/boot/elilo.efi" \
	         "::EFI/BOOT/BOOTX64.EFI"
	mcopy -i "$iso_root/boot/efiboot.img" \
	         "$root_fs/boot/elilo.conf" \
	         "::EFI/BOOT/"
	mcopy -i "$iso_root/boot/efiboot.img" "$root_fs/boot/bzImage" "::EFI/BOOT/"
	mcopy -i "$iso_root/boot/efiboot.img" \
	         "$root_fs/boot/initrd.xz" \
	         "::EFI/BOOT/"
fi

# put the kernel, the boot loader and its configuration file in the image root,
# for BIOS boot
mv "$root_fs/boot/bzImage" "$iso_root/boot/"
mv "$root_fs/boot/initrd.xz" "$iso_root/boot/"
mv "$root_fs/boot/isolinux.bin" "$iso_root/"
mv "$root_fs/boot/isohdpfx.bin" "$iso_root/"
mv "$root_fs/boot/isolinux.cfg" "$iso_root/"
rm -rf "$root_fs/boot"

# generate the root file system image
mksquashfs "$root_fs" \
           "$iso_root/boot/rootfs.sfs" \
           -comp xz \
           -Xbcj x86 \
           -b 512K \
           -no-exports
rm -rf "$root_fs"

# generate an ISO image
[ ! -d releases ] && mkdir releases
if [ -f "$iso_root/boot/efiboot.img" ]
then
	uefi_flags="-eltorito-alt-boot \
	            -e boot/efiboot.img \
	            -no-emul-boot \
	            -isohybrid-gpt-basdat"
else
	uefi_flags=""
fi
xorriso -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "RLSD_$VERSION" \
        -appid "RLSD $VERSION" \
        -eltorito-boot isolinux.bin \
        -eltorito-catalog boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -isohybrid-mbr "$iso_root/isohdpfx.bin" \
        $uefi_flags \
        -output "releases/rlsd-$VERSION-$ARCH$SUFFIX.iso" \
        "$iso_root"

# clean up
rm -rf "$iso_root"
