#!/bin/sh

. ./config

# unneeded files and directories in the root file system
UNNEEDED_FILES="/lib/*.a
                /lib/*.o
                /lib/*.lds
                /lib/alsa-lib/smixer/*.a
                /usr/share/man/man2
                /usr/share/man/man3
                /usr/include
                /lib/pkgconfig
                /bin/*-config
                /usr/share/ffmpeg/examples
                /usr/share/ghostscript/*/examples
                /usr/share/doc/libxml2/examples
                /usr/share/doc/libjpeg-turbo/examples
                /usr/share/doc/xz/examples
                /usr/share/gdk-pixbuf
                /usr/share/x11vnc"

# package present in the root file system
MINIMAL_PACKAGES="linux
                  toybox
                  lazy_utils
                  loksh
                  lok
                  luufs
                  packdude
                  mandoc
                  less
                  isolinux
                  dhcpcd
                  rfkill
                  iw
                  wpa_supplicant
                  gzip
                  lbzip2
                  xz
                  libarchive
                  packdude
                  elvis"
BIOS_PACKAGES="$MINIMAL_PACKAGES
               dropbear
               nc
               tinyunmute
               alsa_utils
               htop
               nano
               tinyxserver
               jwm
               aterm
               xmodmap
               conky
               rox
               gtkdialog1
               dillo
               emelfm
               ytree
               guitar
               gtkcat
               prboom
               nethack
               shutbox
               xpacman
               xsoldier
               xasteroids
               xhippo
               mtpaint
               gtksee
               mhwaveedit
               gcolor
               xaos
               lynx
               sylpheed
               xchat
               scrollz
               guiftp
               snownews
               bwm_ng
               shus
               tcpdump
               ted
               siag
               calcoo
               bc
               gcalendar
               calcurse
               gtklepin
               gbase
               gv
               beaver
               gtkedit
               nano
               gtkdiskfree
               gdmap
               htop
               ncdu
               gtkfontsel
               x11vnc
               screen
               jimtcl
               gtkfind
               grun
               ffmpeg"
UEFI_PACKAGES="$BIOS_PACKAGES elilo"

BASE_DIR="$(pwd)"
VERSION="$(date +%d%m%Y)"

# include the configuration file
. ./config

# if all packages were built locally, use the build output
if [ -d "$BASE_DIR/repo" ]
then
	repo="file://$BASE_DIR/repo"
else
	# otherwise, use the upstream repository
	repo="http://dimkr.insomnia247.nl/$ARCH"
fi

# initialize the root file system with the skeleton
root_fs="$(mktemp -d -u)"
cp -ar "$BASE_DIR/skeleton" "$root_fs"

# choose which packages to install
case "$1" in
	uefi)
		packages="$UEFI_PACKAGES"
		;;
	bios)
		packages="$BIOS_PACKAGES"
		;;
	minimal)
		packages="$MINIMAL_PACKAGES"
		;;
esac

# install the packages
mkdir -p "$root_fs/var/packdude"
for package in $packages
do
	packdude -i $package -n -p "$root_fs" -u "$repo"
done

# remove the package database
rm -f "$root_fs/var/packdude"/repo-*.sqlite3

# remove packdude's lock file
rm -f "$root_fs/var/packdude/lock"

# create a temporary directory for the extracted ISO image contents
iso_root="$(mktemp -d)"

# create a 16 MB, FAT12 UEFI boot image, for UEFI boot
if [ "uefi" = "$1" ]
then
	dd if=/dev/zero of="$iso_root/efiboot.img" bs=1024K count=16
	/sbin/mkfs.vfat -F 12 -n "RLSD" "$iso_root/efiboot.img"
	mmd -i "$iso_root/efiboot.img" "EFI"
	mmd -i "$iso_root/efiboot.img" "EFI/BOOT"
	mcopy -i "$iso_root/efiboot.img" \
	         "$root_fs/boot/elilo.efi" \
	         "::EFI/BOOT/BOOTX64.EFI"
	mcopy -i "$iso_root/efiboot.img" \
	         "$root_fs/boot/elilo.conf" \
	         "::EFI/BOOT/"
	mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/bzImage" "::EFI/BOOT/"
fi

# put the kernel, the boot loader and its configuration file in the image root,
# for BIOS boot
mv "$root_fs/boot/bzImage" "$iso_root/"
mv "$root_fs/boot/isolinux.bin" "$iso_root/"
mv "$root_fs/boot/isohdpfx.bin" "$iso_root/"
mv "$root_fs/boot/isolinux.cfg" "$iso_root/"
rm -rf "$root_fs/boot"

# remove unneeded files and directories
for i in $UNNEEDED_FILES
do
	rm -rf "$root_fs"/$i > /dev/null 2>&1
done

# remove all .gitignore files
find "$root_fs" -name .gitignore -delete

# add RLSD's documentation
install -m 644 "$BASE_DIR/README" "$root_fs/usr/share/doc/rlsd/README"
install -m 644 "$BASE_DIR/MANIFEST" "$root_fs/usr/share/doc/rlsd/MANIFEST"
install -m 644 "$BASE_DIR/AUTHORS" "$root_fs/usr/share/doc/rlsd/AUTHORS"
install -m 644 "$BASE_DIR/THANKS" "$root_fs/usr/share/doc/rlsd/THANKS"
install -m 644 "$BASE_DIR/COPYING" "$root_fs/usr/share/doc/rlsd/COPYING"

# generate the root file system image
chown -R 0:0 "$root_fs"
find "$root_fs" -type d | while read directory
do
	chmod 755 "$directory"
done
chmod 700 "$root_fs/root"
chown 1000:1000 "$root_fs/home/someone"
chmod 755 "$root_fs/home/someone"
mksquashfs "$root_fs" \
           "$iso_root/rootfs.sfs" \
           -comp xz \
           -Xbcj x86 \
           -b 512K \
           -no-exports
rm -rf "$root_fs"

# generate an ISO image
cd "$BASE_DIR"
[ ! -d "$BASE_DIR/releases" ] && mkdir "$BASE_DIR/releases"
if [ "uefi" = "$1" ]
then
	uefi_flags="-eltorito-alt-boot \
	            -e efiboot.img \
	            -no-emul-boot \
	            -isohybrid-gpt-basdat"
	suffix=""
else
	uefi_flags=""
	suffix="-$1"
fi
xorriso -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "RLSD_$VERSION" \
        -appid "RLSD $VERSION" \
        -eltorito-boot isolinux.bin \
        -eltorito-catalog boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -isohybrid-mbr "$iso_root/isohdpfx.bin" \
        $uefi_flags \
        -output "$BASE_DIR/releases/rlsd-$VERSION-$ARCH$suffix.iso" \
        "$iso_root"

# clean up
rm -rf "$iso_root"
