#!/bin/sh

# build_chroot: generates a chroot environment and builds RLSD inside it

# the Trisquel version to use
RELEASE="belenos"

# the package mirror to fetch packages from
MIRROR="http://mirror.fsf.org/trisquel/"

# packages required to build RLSD
REQUIRED_PACKAGES="build-essential autoconf automake autotools-dev
                   autoconf-archive unzip flex bison git nasm squashfs-tools
                   pkg-config file subversion bc xfonts-utils dosfstools mtools
                   yasm libarchive-dev libcurl4-gnutls-dev xorriso wget
                   liblwp-useragent-determined-perl advancecomp optipng curl
                   gawk clzip"

# set the locale to the default, to speed up everything
export LANG="C"
export LC_ALL="$LANG"

# initialize PATH, to ensure it includes /usr/local/bin
export PATH="/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin"

if [ "root" != "$(whoami)" ]
then
	echo "Must run as root"
	exit 1
fi

if [ -d "$1" ]
then
	exists=1
else
	# install debootstrap
	if [ -z "$(which debootstrap)" ]
	then
		apt-get -y install debootstrap
		[ 0 -ne $? ] && exit 1
	fi

	# run debootstrap
	arch="$(uname -m)"
	case "$arch" in
		i?86)
			arch="i386"
			;;
		x86_64)
			arch="amd64"
			;;
	esac
	debootstrap --arch "$arch" $RELEASE "$1" $MIRROR
	[ 0 -ne $? ] && exit 1

	# set the repositories list
	echo "deb $MIRROR $RELEASE main
deb $MIRROR $RELEASE-updates main
deb $MIRROR $RELEASE-security main" > "$1/etc/apt/sources.list"

	exists=0
fi

# copy over /etc/resolv.conf from the host, to use the same DNS servers
cp /etc/resolv.conf "$1/etc/"

# bind the host virtual file systems to the chroot environment
mount --bind /proc "$1/proc"
mount --bind /sys "$1/sys"
mount --rbind /dev "$1/dev"

# mount a tmpfs at /tmp, to speed up the ISO generation
mount -t tmpfs rlsd-tmp "$1/tmp"

# update all packages
chroot "$1" apt-get update
chroot "$1" apt-get -y upgrade

# install additional, required packages
if [ 0 -eq $exists ]
then
	chroot "$1" apt-get -y install $REQUIRED_PACKAGES
	[ 0 -ne $? ] && exit 1
fi

# build a musl cross-compiler using musl-cross
if [ ! -d "$1/opt/cross" ]
then
	chroot "$1" sh -c "git clone https://github.com/dimkr/musl-cross.git \
	                             /root/musl-cross; \
	                   cd /root/musl-cross; sh build.sh"
fi

# fetch or update the RLSD build environment
if [ ! -d "$1/root/rlsd" ]
then
	chroot "$1" git clone https://github.com/dimkr/rlsd.git /root/rlsd
else
	chroot "$1" sh -c "cd /root/rlsd; git pull"
fi

# install Ed25519
if [ ! -f "$1/lib/libed25519.a" ]
then
	chroot "$1" sh -c "git clone https://github.com/orlp/ed25519.git \
	                             /root/ed25519; \
	                   cd /root/ed25519; \
	                   patch -p 1 < ../rlsd/patches/ed25519-build.patch; \
	                   cd src; \
	                   make; \
	                   cp libed25519.a /lib/;
	                   cp ed25519.h /usr/include/"
fi

# install packlad and its private key; the key pair in /etc/packlad will be used
# by RLSD's packlad
if [ ! -f "$1/bin/packlad" ]
then
	chroot "$1" sh -c "git clone https://github.com/dimkr/packlad.git \
	                             /root/packlad; \
	                   cd /root/packlad; make genkeys; make; make install"
	install -m 400 "$1/root/packlad/keys/priv_key" "$1/etc/packlad/priv_key"
fi

# install sstrip
if [ ! -f "$1/usr/local/bin/sstrip" ]
then
	chroot "$1" sh -c "cd /root; \
	 wget \
	  http://www.muppetlabs.com/~breadbox/pub/software/ELFkickers-3.0a.tar.gz; \
	 tar -xzf ELFkickers-3.0a.tar.gz; \
	 cd ELFkickers-3.0a/sstrip; \
	 make; \
	 cp sstrip /usr/local/bin"
fi

# clean up files from the previous build
for i in repo build sysroot
do
	[ -d "$1/root/rlsd/$i" ] && rm -rf "$1/root/rlsd/$i"
done
rm -f "$1/root/rlsd"/*-config > /dev/null 2>&1
rm -f "$1/root/rlsd"/musl-gcc* > /dev/null 2>&1

# build RLSD
chroot "$1" sh -c "cd /root/rlsd; \
                   make packages; \
                   make images"

# clean up
umount -l "$1/tmp"
umount -l "$1/dev"
umount -l "$1/sys"
umount -l "$1/proc"
