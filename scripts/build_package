#!/bin/sh

# build_package: builds a single package

# include the configuration file
. ./config

# prepare the build environment
HOST="$ARCH-musl-linux"
if [ -e "musl-gcc" ]
then
	export REALGCC="$HOST-gcc"
	export CC="$BASE_DIR/musl-gcc"
else
	export CC="$HOST-gcc"
fi
export AR="$HOST-ar"
export LD="$HOST-ld"
export OBJCOPY="$HOST-objcopy"
export STRIP="$HOST-strip"
export PKG_CONFIG="$BASE_DIR/pkg-config"
export PKG_CONFIG_PATH="$SYSROOT/lib/pkgconfig"
export PKG_CONFIG_LIBDIR="/lib/pkgconfig"
export MAKE="make -j $(cat /proc/cpuinfo | grep ^processor | wc -l)"
export BASE_DIR
export PATH="$BASE_DIR:/opt/cross/$ARCH-linux-musl/bin:$PATH"
export LANG="C"
export LC_ALL="C"
CONFIGURE_LIBRARY_FLAGS="--enable-static --disable-shared"
case "$ARCH" in
	i?86)
		export KARCH="x86"
		;;
	*)
		export KARCH="$ARCH"
		;;
esac

case "$ARCH" in
	i?86)
		CFLAGS="-march=i486 -mtune=i686 $CFLAGS"
		;;
	*)
		CFLAGS="-mtune=generic $CFLAGS"
	 	;;
esac
export ARCH
export CFLAGS="$CFLAGS -I$SYSROOT/usr/include"
export LDFLAGS="$LDFLAGS -L$SYSROOT/lib"

# replace pkg-config with a wrapper which forces "--static"
if [ -d "$SYSROOT/lib/pkgconfig" ] && [ ! -f pkg-config ]
then
	echo "#!/bin/sh
output=\"\$($(which pkg-config) --static \"\$@\")\"
code=\$?
[ 0 -ne \$code ] && exit \$code
echo -n \"\$output\" | sed -e s~'-L/lib'~\"-L$SYSROOT/lib\"~g -e s~'-I/usr'~\"-I$SYSROOT/usr\"~g -e s~'-I/lib'~\"-I$SYSROOT/lib\"~g -e s~'^/usr/share'~\"$SYSROOT/usr/share\"~g
exit 0" > pkg-config
	chmod 755 pkg-config
fi

# replace glib-config, gtk-config, freetype-config, gdk-pixbuf-config,
# xml2-config and sdl-config with wrappers, which prepend paths with $SYSROOT
for library in glib gtk freetype gdk-pixbuf gdk-pixbuf xml2 sdl
do
	if [ -f "$SYSROOT/bin/$library-config" ] && [ ! -f $library-config ]
	then
		echo "#!/bin/sh
\"$SYSROOT/bin/$library-config\" \"\$@\" | sed -e s~'-L/lib'~\"-L$SYSROOT/lib\"~g -e s~'-I/usr'~\"-I$SYSROOT/usr\"~g -e s~'-I/lib'~\"-I$SYSROOT/lib\"~g" \
		> $library-config
		chmod 755 $library-config
	fi
done
export GLIB_CONFIG="$BASE_DIR/glib-config"
export GTK_CONFIG="$BASE_DIR/gtk-config"

# make sure the package name is valid
if [ ! -e ./packages/$1.sh ]
then
    echo "Invalid package name: $1"
    exit 1
fi

# initialize the package dependencies list with its build dependencies
PACKAGE_DEPS="$(grep ^$1: ./Makefile.deps | cut -f 2 -d : | cut -c 2-)"

# include the build script
export PACKAGE_ARCH="$ARCH"
. ./packages/$1.sh

# if the binary package exists already, do nothing
[ -f "$REPO_DIR/$1-$PACKAGE_VERSION.pkg" ] && exit 0

# create a directory for the package sources
mkdir -p ./sources/$1

# create a sandbox directory for building packages
[ ! -d build ] && mkdir build

# download the package source files
for i in $PACKAGE_SOURCES
do
	case "$i" in
		# if an output file was specified, separate it from the URL
		*,*)
			destination="${i##*,}"
			url="${i%%,*}"
			;;

		# otherwise, filter the output file name from the URL
		*)
			destination="${i##*/}"
			url="$i"
			;;
	esac

	# download the file
	if [ ! -f "./sources/$1/$destination" ]
	then
		case "$i" in
			ftp://*|http://*|https://*)
				wget "$url" -O "./sources/$1/$destination"
				;;

			svn://*)
				temporary_diretcory="$(mktemp -d)"
				cd "$temporary_diretcory"
				output_directory="$(basename "$destination" .tar.xz)"
				svn co $url "$output_directory"
				tar -c "$output_directory" | \
				xz -9 -e > "$BASE_DIR/sources/$1/$destination"
				rm -rf "$temporary_diretcory"
				cd "$BASE_DIR"
				;;
		esac
	fi

	# create a link to the file
	[ ! -e "build/$destination" ] && \
	                                   ln -s "../sources/$1/$destination" build/
done

# build the package
cd build
build

# install the package to a directory
installation_prefix="$(mktemp -d)"
package "$installation_prefix"

# remove libtool libraries
if [ -d "$installation_prefix/lib" ]
then
	find "$installation_prefix/lib" -name "*.la" -delete
fi

# copy the package to the system root
[ ! -d "$SYSROOT" ] && mkdir -p "$SYSROOT"
cp -a "$installation_prefix"/* "$SYSROOT/"

# remove all files not needed at run-time
for i in "$installation_prefix/usr/share/info" \
         "$installation_prefix/usr/share/gtk-doc" \
         "$installation_prefix/lib/charset.alias" \
         "$installation_prefix/etc/X11" \
         "$installation_prefix/usr/share/gnome" \
         "$installation_prefix/usr/share/aclocal" \
         "$installation_prefix/lib"/*.a \
         "$installation_prefix/lib"/*.o \
         "$installation_prefix/lib"/*.lds \
         "$installation_prefix/lib/alsa-lib/smixer"/*.a \
         "$installation_prefix/usr/share/man/man2" \
         "$installation_prefix/usr/share/man/man3" \
         "$installation_prefix/usr/include" \
         "$installation_prefix/lib/pkgconfig" \
         "$installation_prefix/bin"/*-config \
         "$installation_prefix/usr/share/gdk-pixbuf" \
         "$installation_prefix/usr/share/libxml2/xml2Conf.sh"
do
	rm -rvf "$i" 2>/dev/null
done

# remove empty directories
cd "$installation_prefix"
find . -empty | while read i
do
	[ -d "$BASE_DIR/skeleton/$i" ] && rmdir -v "$i"
done
cd "$BASE_DIR"

# strip all executables, unless they were built in debug mode
should_strip=1
for flag in $CFLAGS
do
	if [ "-g" = "$flag" ]
	then
		should_strip=0
		break
	fi
done
if [ 1 -eq $should_strip ] && [ -d "$installation_prefix/bin" ]
then
	find "$installation_prefix" | while read file
	do
		[ "application/x-executable" != "$(file -b --mime-type "$file")" ] && \
		                                                                continue
		$STRIP --strip-all -R .note -R .comment "$file"
		sstrip -z "$file"
	done
fi

# strip all kernel modules
if [ -d "$installation_prefix/lib/modules" ]
then
	find "$installation_prefix/lib/modules" -name '*.ko' -type f |
	while read module
	do
		"$STRIP" --strip-unneeded "$module"
	done
fi

# optimize all PNG images
if [ -d "$installation_prefix/usr/share" ]
then
	find "$installation_prefix/usr/share" -name '*.png' -type f |
	while read image
	do
		optipng -o7 "$image"
		advpng -z4 "$image"
	done
fi

# remove translations
[ -d "$installation_prefix/usr/share/locale" ] && \
                                 rm -rvf "$installation_prefix/usr/share/locale"

if [ -d "$installation_prefix/usr/share/man" ]
then
	# remove localized man pages
	for i in "$installation_prefix/usr/share/man"/*
	do
		case "$i" in
			*/man[1-9])
				break
				;;
			*)
				rm -vrf "$i"
				;;
		esac
	done

	# decompress compressed man pages
	find "$installation_prefix/usr/share/man" -name '*.gz' -type f |
	while read page
	do
		gunzip -v "$page"
	done
fi

# remove empty directories
rmdir "$installation_prefix/usr/share/man"/* 2>/dev/null
rmdir "$installation_prefix/usr/share"/* 2>/dev/null
rmdir "$installation_prefix/usr"/* 2>/dev/null
rmdir "$installation_prefix"/* 2>/dev/null

# add the package template
[ -d "$BASE_DIR/templates/$1" ] && \
                        cp -a "$BASE_DIR/templates/$1"/* "$installation_prefix/"

# remove .gitignore files
find "$installation_prefix" -name .gitignore -delete

# create a packlad package
[ ! -d "$REPO_DIR" ] && mkdir -p "$REPO_DIR"
dir2pkg "$installation_prefix" \
        /etc/packlad/priv_key \
        /etc/packlad/pub_key \
        "$REPO_DIR/$1-$PACKAGE_VERSION.pkg"

# remove the temporary installation directory
rm -rf "$installation_prefix"

# generate a packlad package entry
echo "$1|$PACKAGE_VERSION|$PACKAGE_DESC|$1-$PACKAGE_VERSION.pkg|$PACKAGE_ARCH|$PACKAGE_DEPS" >> "$REPO_DIR/available"
