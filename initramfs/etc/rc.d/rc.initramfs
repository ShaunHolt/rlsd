#!/bin/ksh

# set the executable search path
export PATH="/bin"

# clear the screen from boot loader or early kernel messages
clear

# mount virtual file systems
echo -n "Mounting virtual file systems ..."

mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t devtmpfs dev /dev
mount -t tmpfs -o mode=700,size=5% run /run
mount -t tmpfs -o mode=755,size=20% log /var/log
mount -t tmpfs -o mode=1777,noexec,nosuid,nodev,size=25% tmp /tmp
mkdir /dev/pts
mount -t devpts -o mode=620 pts /dev/pts
mkdir /run/shm /dev/shm
mount -B /run/shm /dev/shm

# check the amount of available RAM - if it's at least 256 MB, copy the root
# file system image to RAM
if [ 262144 -le $(grep MemTotal: /proc/meminfo | awk '{print $2}') ]
then
	copy=1
else
	copy=0
fi

# read the kernel command-line
home=""
secure=1
for i in $(cat /proc/cmdline)
do
	case "$i" in
		home=*)
			home="${i#*=}"
			;;
		sleep=*)
			interval="${i#*=}"
			echo -n " done.
Waiting for $interval seconds ..."
			sleep $interval
			;;
		secure=0)
			secure=0
			;;
	esac
done

# start logging daemons
echo -n " done.
Starting logging services ..."

syslogd
klogd

# find the home partition
echo -n " done.
Searching for the home partition ..."
cd /sys/class/block
is_found=0
for i in 1 2 3 4 5 6 7 8 9 10
do
	for partition in sd* mmc* sr*
	do
		mount -o ro /dev/$partition /mnt/home
		if [ 0 -eq $? ]
		then
			if [ -f /mnt/home/bzImage ] && [ -f /mnt/home/rootfs.sfs ]
			then
				is_found=1
				break 2
			fi
		fi
	done
	sleep 1
done
if [ 0 -eq $is_found ]
then
	echo " failure."
	exit
fi

# copy the root file system image to RAM
if [ 0 -eq $copy ]
then
	image_path="/mnt/home/rootfs.sfs"
else
	echo -n " done.
Copying the root file system to RAM ..."
	cp /mnt/home/rootfs.sfs /rootfs.sfs
	umount /mnt/home
	image_path="/rootfs.sfs"
fi

# mount the root file system image
echo -n " done.
Mounting the root file system ..."
losetup -r /dev/loop0 "$image_path"
mount -t squashfs -o ro /dev/loop0 /mnt/ro

# mount a writable file system
echo -n " done.
Setting up a writable system ..."
if [ -n "$home" ]
then
	mount "/dev/$home" /mnt/rw
else
	mount -t tmpfs save /mnt/rw
fi

# mount a layered file system
echo -n " done.
Setting up a layered file system ..."

luufs -o suid,dev,allow_other,default_permissions /mnt/ro /mnt/rw /mnt/union
mount -B /sys /mnt/union/sys
mount -R /dev /mnt/union/dev
mount -B /run /mnt/union/run
mount -B /mnt/union/run /mnt/union/var/run
mkdir /run/mnt
mount -B /run/mnt /mnt/union/mnt
mount -B /var/log /mnt/union/var/log
mount -B /tmp /mnt/union/tmp

# copy the package installation data database to the writeable layer
if [ ! -f /mnt/rw/var/packdude/data.sqlite3 ]
then
	cp /mnt/ro/var/packdude/core.sqlite3 /mnt/rw/var/packdude/data.sqlite3
fi

echo " done."

# continue the boot process inside the layered file system, in a container
if [ 0 -eq $secure ]
then
	mount -B /proc /mnt/union/proc
	cttyhack chroot /mnt/union /etc/rc.d/rc.sysinit
else
	cttyhack contain /mnt/union /etc/rc.d/rc.sysinit
	case $? in
		2)
			poweroff
			;;
		*)
			reboot
			;;
	esac
fi
