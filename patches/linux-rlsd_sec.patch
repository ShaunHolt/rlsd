diff -rupN linux-3.14.19-orig/security/Kconfig linux-3.14.19/security/Kconfig
--- linux-3.14.19-orig/security/Kconfig	2014-09-25 14:59:32.832983958 +0300
+++ linux-3.14.19/security/Kconfig	2014-09-25 15:06:35.003976397 +0300
@@ -122,6 +122,7 @@ source security/smack/Kconfig
 source security/tomoyo/Kconfig
 source security/apparmor/Kconfig
 source security/yama/Kconfig
+source security/rlsd/Kconfig
 
 source security/integrity/Kconfig
 
@@ -132,6 +133,7 @@ choice
 	default DEFAULT_SECURITY_TOMOYO if SECURITY_TOMOYO
 	default DEFAULT_SECURITY_APPARMOR if SECURITY_APPARMOR
 	default DEFAULT_SECURITY_YAMA if SECURITY_YAMA
+	default DEFAULT_SECURITY_RLSD if SECURITY_RLSD
 	default DEFAULT_SECURITY_DAC
 
 	help
@@ -153,6 +155,9 @@ choice
 	config DEFAULT_SECURITY_YAMA
 		bool "Yama" if SECURITY_YAMA=y
 
+	config DEFAULT_SECURITY_RLSD
+		bool "RLSD" if SECURITY_RLSD=y
+	
 	config DEFAULT_SECURITY_DAC
 		bool "Unix Discretionary Access Controls"
 
@@ -165,6 +170,7 @@ config DEFAULT_SECURITY
 	default "tomoyo" if DEFAULT_SECURITY_TOMOYO
 	default "apparmor" if DEFAULT_SECURITY_APPARMOR
 	default "yama" if DEFAULT_SECURITY_YAMA
+	default "rlsd" if DEFAULT_SECURITY_RLSD
 	default "" if DEFAULT_SECURITY_DAC
 
 endmenu
diff -rupN linux-3.14.19-orig/security/Makefile linux-3.14.19/security/Makefile
--- linux-3.14.19-orig/security/Makefile	2014-09-25 14:59:32.860983957 +0300
+++ linux-3.14.19/security/Makefile	2014-09-25 15:02:20.335980958 +0300
@@ -8,6 +8,7 @@ subdir-$(CONFIG_SECURITY_SMACK)		+= smac
 subdir-$(CONFIG_SECURITY_TOMOYO)        += tomoyo
 subdir-$(CONFIG_SECURITY_APPARMOR)	+= apparmor
 subdir-$(CONFIG_SECURITY_YAMA)		+= yama
+subdir-$(CONFIG_SECURITY_RLSD)		+= rlsd
 
 # always enable default capabilities
 obj-y					+= commoncap.o
@@ -22,6 +23,7 @@ obj-$(CONFIG_AUDIT)			+= lsm_audit.o
 obj-$(CONFIG_SECURITY_TOMOYO)		+= tomoyo/built-in.o
 obj-$(CONFIG_SECURITY_APPARMOR)		+= apparmor/built-in.o
 obj-$(CONFIG_SECURITY_YAMA)		+= yama/built-in.o
+obj-$(CONFIG_SECURITY_RLSD)		+= rlsd/built-in.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
 
 # Object integrity file lists
diff -rupN linux-3.14.19-orig/security/rlsd/Kconfig linux-3.14.19/security/rlsd/Kconfig
--- linux-3.14.19-orig/security/rlsd/Kconfig	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.19/security/rlsd/Kconfig	2014-09-25 14:59:54.345983572 +0300
@@ -0,0 +1,10 @@
+config SECURITY_RLSD
+	bool "RLSD support"
+	depends on SECURITY
+	select SECURITYFS
+	select SECURITY_PATH
+	default n
+	help
+	  This selects the RLSD security module.
+
+	  If you are unsure how to answer this question, answer N.
diff -rupN linux-3.14.19-orig/security/rlsd/Makefile linux-3.14.19/security/rlsd/Makefile
--- linux-3.14.19-orig/security/rlsd/Makefile	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.19/security/rlsd/Makefile	2014-09-25 14:59:54.345983572 +0300
@@ -0,0 +1,3 @@
+obj-$(CONFIG_SECURITY_RLSD) := rlsd.o
+
+rlsd-y := rlsd_lsm.o
diff -rupN linux-3.14.19-orig/security/rlsd/rlsd_lsm.c linux-3.14.19/security/rlsd/rlsd_lsm.c
--- linux-3.14.19-orig/security/rlsd/rlsd_lsm.c	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.19/security/rlsd/rlsd_lsm.c	2014-09-25 17:56:38.911930733 +0300
@@ -0,0 +1,62 @@
+/*
+ * RLSD Linux Security Module
+ *
+ * Author: Dima Krasner <dima@dimakrasner.com>
+ *
+ */
+
+#include <linux/security.h>
+#include <linux/sched.h>
+#include <linux/printk.h>
+
+static bool rlsd_enabled = 1;
+
+static int __init rlsd_enabled_setup(char *str)
+{
+        unsigned long enabled;
+        int error = strict_strtoul(str, 0, &enabled);
+        if (!error)
+                rlsd_enabled = enabled ? 1 : 0;
+        return 1;
+}
+
+__setup("rlsd=", rlsd_enabled_setup);
+
+static int rlsd_ptrace_traceme(struct task_struct *parent) {
+	printk(KERN_ALERT "rlsd: denied PTRACE_TRACEME from %lu\n", (unsigned long) parent->pid);
+	return -EPERM;
+}
+
+static int rlsd_ptrace_access_check(struct task_struct *child,
+                                    unsigned int mode) {
+	printk(KERN_ALERT "rlsd: denied ptrace from %lu\n", (unsigned long) child->pid);
+	return -EPERM;
+}
+
+static struct security_operations rlsd_ops = {
+	.name			= "rlsd",
+
+	.ptrace_access_check	= rlsd_ptrace_access_check,
+	.ptrace_traceme		= rlsd_ptrace_traceme
+};
+
+static __init int rlsd_init(void)
+{
+	if (!rlsd_enabled) {
+		printk(KERN_WARNING "rlsd: disabled.\n");
+		return 0;
+	}
+
+	if (!security_module_enable(&rlsd_ops))
+		return 0;
+
+	if (register_security(&rlsd_ops)) {
+		panic("rlsd: kernel registration failed.\n");
+	}
+
+	printk(KERN_INFO "rlsd: enabled.\n");
+
+	return 0;
+}
+
+security_initcall(rlsd_init);
